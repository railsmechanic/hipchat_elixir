# Code generated by `$ mix hipchat.generate`
defmodule Hipchat.V2.Client do
  @moduledoc """
  Client struct module for HipChat API v2.
  """

  use Hipchat.Httpc

  @content_header %{"content-type" => "application/json"}
  @endpoint "https://api.hipchat.com/v2"

  defstruct [:access_token, :auth_test?, :hackney_opts]
  @type t :: %__MODULE__{
    access_token: nil | String.t,
    auth_test?:   boolean,
    hackney_opts: Keyword.t,
  }
  @type res_t :: {:ok, Res.t} | {:error, any}

  @doc """
  Generate client struct for HipChat API.

  `access_token` needs to be retrieved beforehand. It will be included in an Authorization header.
  If set to `nil` the header will not be generated.

  If `auth_test?` is set to `true`, `auth_test=true` query parameter will be generated. Defaults to `false`.
  This can be used to test an `access_token`.

  For `hackney_opts`, see [here](https://hexdocs.pm/hackney/hackney.html#request-5) for details.
  """
  @spec new(nil | String.t, boolean, Keyword.t) :: t
  def new(access_token, auth_test? \\ false, hackney_opts \\ []) do
    %__MODULE__{
      access_token: access_token,
      auth_test?:   auth_test?,
      hackney_opts: hackney_opts,
    }
  end

  @doc false
  @spec send_request(t, Method.t, String.t, list, nil | map) :: res_t
  def send_request(client, method, path, query_params, nil) do
    Httpc.request(method, @endpoint <> path, "", headers(client), httpc_opts(client, query_params))
  end
  def send_request(client, method, path, query_params, body) do
    case Poison.encode(body) do
      {:ok, json} -> Httpc.request(method, @endpoint <> path, json, headers(client), httpc_opts(client, query_params))
      error_tuple -> error_tuple
    end
  end

  defp headers(%__MODULE__{access_token: nil}), do: @content_header
  defp headers(%__MODULE__{access_token: at }), do: Map.put(@content_header, "authorization", "Bearer #{at}")

  defp httpc_opts(%__MODULE__{auth_test?: false, hackney_opts: ho}, query_params) do
    [{:params, query_params} | ho]
  end
  defp httpc_opts(%__MODULE__{auth_test?: true, hackney_opts: ho}, query_params) do
    [{:params, [{"auth_test", "true"} | query_params]} | ho]
  end
end
