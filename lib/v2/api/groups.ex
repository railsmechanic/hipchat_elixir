# Code generated by `$ mix hipchat.generate`
defmodule Hipchat.V2.Api.Groups do
  @moduledoc """
  HipChat V2 Groups API module.
  """

  alias Hipchat.V2.Client

  @doc """
  Delete group avatar.

  Authentication required, with scope admin_group.

  Accessible by group clients, users.

  https://www.hipchat.com/docs/apiv2/method/delete_group_avatar
  """
  @spec delete_group_avatar(Client.t, String.t) :: Client.res_t
  def delete_group_avatar(client, group_id) do
    Client.send_request(client, :delete, "/group/#{group_id}/avatar", [], %{})
  end

  @doc """
  Get a group's details.

  Authentication required, with scope view_group.

  Accessible by group clients, users.

  https://www.hipchat.com/docs/apiv2/method/view_group
  """
  @spec get_group(Client.t, String.t) :: Client.res_t
  def get_group(client, group_id) do
    Client.send_request(client, :get, "/group/#{group_id}", [], %{})
  end

  @doc """
  Gets a group avatar

  Authentication required, with scope view_group.

  Accessible by group clients, users.

  https://www.hipchat.com/docs/apiv2/method/get_group_avatar
  """
  @spec get_group_avatar(Client.t, String.t) :: Client.res_t
  def get_group_avatar(client, group_id) do
    Client.send_request(client, :get, "/group/#{group_id}/avatar", [], %{})
  end

  @doc """
  Get a group's details.

  Authentication required, with scope view_group.

  Accessible by group clients, users.

  https://www.hipchat.com/docs/apiv2/method/group_statistics
  """
  @spec get_group_statistics(Client.t, String.t) :: Client.res_t
  def get_group_statistics(client, group_id) do
    Client.send_request(client, :get, "/group/#{group_id}/statistics", [], %{})
  end

  @doc """
  Update a group avatar.

  Accepted image types are JPEG, PNG and GIF.
  Must be included in `avatar` field of request body, as base64 encoded string.

  Authentication required, with scope admin_group.

  Accessible by group clients, users.

  https://www.hipchat.com/docs/apiv2/method/update_group_avatar
  """
  @spec update_group_avatar(Client.t, String.t, map) :: Client.res_t
  def update_group_avatar(client, group_id, body) do
    Client.send_request(client, :put, "/group/#{group_id}/avatar", [], body)
  end
end
